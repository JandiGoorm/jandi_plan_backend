name: JustPlanIt Backend CI/CD

on:
  push:
    branches: [ "master" ]

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      # [수정 1] Git 커밋 해시를 미리 구해서 모든 후속 스텝에서 사용하도록 준비
      # 이 스텝을 빌드보다 먼저 실행하여 일관성을 유지합니다.
      - name: Get Git commit hash
        id: git_hash
        run: echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.GHCR_PAT }}

      # [수정 2] Build and push 스텝에서 이전 스텝의 결과물을 사용
      - name: Build and push Docker image
        env:
          IMAGE_NAME: justplanit
        run: |
          # 이전 스텝에서 생성한 IMAGE_TAG 변수를 사용합니다.
          docker build -t ghcr.io/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.git_hash.outputs.IMAGE_TAG }} .
          docker push ghcr.io/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.git_hash.outputs.IMAGE_TAG }}

      # [수정 3] Deploy 스텝도 동일하게 이전 스텝의 결과물을 사용
      - name: Deploy Application to Server
        run: |
          cd /apps/justplanit
          
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          # 이전 스텝에서 생성한 IMAGE_TAG 변수를 사용합니다.
          export IMAGE_TAG=${{ steps.git_hash.outputs.IMAGE_TAG }}
          
          /usr/local/bin/docker-compose up -d --force-recreate
          
          docker image prune -f